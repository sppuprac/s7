import pandas as pd
from math import radians, sin, cos, sqrt, asin
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor

# Load and clean the data
df = pd.read_csv('uber.csv')
df.dropna(inplace=True)
df.drop(['Unnamed: 0', 'key'], axis=1, inplace=True)

# Handle fare amounts
fare_amt = [fare for fare in df.fare_amount if fare >= 0]
df.fare_amount = [fare if fare >= 0 else 0 for fare in df.fare_amount]
df['fare_amount'] = [df.fare_amount.mean() if fare == 0 else fare for fare in df.fare_amount]

# Calculate travel distance using Haversine formula
def distance_formula(longitude1, latitude1, longitude2, latitude2):
    travel_dist = []
    for pos in range(len(longitude1)):
        lon1, lat1, lon2, lat2 = map(radians, [longitude1[pos], latitude1[pos], longitude2[pos], latitude2[pos]])
        dist_lon = lon2 - lon1
        dist_lat = lat2 - lat1
        a = sin(dist_lat / 2)**2 + cos(lat1) * cos(lat2) * sin(dist_lon / 2)**2
        c = 2 * asin(sqrt(a)) * 6371  # Radius of Earth in kilometers
        travel_dist.append(c)
    return travel_dist

df['dist_travel_km'] = distance_formula(df.pickup_longitude.to_numpy(), df.pickup_latitude.to_numpy(),
                                        df.dropoff_longitude.to_numpy(), df.dropoff_latitude.to_numpy())

# Prepare features and target for modeling
df_x = df[['pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude', 'passenger_count', 'dist_travel_km']]
df_y = df['fare_amount']
x_train, x_test, y_train, y_test = train_test_split(df_x, df_y, test_size=0.2, random_state=1)

# Linear Regression Model
model = LinearRegression()
model.fit(x_train, y_train)
y_pred_lin = model.predict(x_test)

# Random Forest Model
rf = RandomForestRegressor(n_estimators=100)
rf.fit(x_train, y_train)
y_pred_rf = rf.predict(x_test)

print("Linear Regression Predictions:", y_pred_lin)
print("Random Forest Predictions:", y_pred_rf)
