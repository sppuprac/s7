import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from scipy.spatial.distance import cdist

# Load the dataset
df = pd.read_csv("sales_data_sample.csv", sep=",", encoding='Latin-1')

# View the first few rows of the dataset
print(df.head(4))

# Describe the dataset
print(df.describe())

# Select relevant columns for clustering
df = df[['ORDERLINENUMBER', 'SALES']]

# Scale the data
scaler = StandardScaler()
scaled_values = scaler.fit_transform(df.values)

# Elbow method for finding the optimal number of clusters (K)
distortions = []
wcss = []
for i in range(1, 11):
    model = KMeans(n_clusters=i, init='k-means++')
    model.fit_predict(scaled_values)
    distortions.append(sum(np.min(cdist(scaled_values, model.cluster_centers_, 'euclidean'), axis=1)) / scaled_values.shape[0])
    wcss.append(model.inertia_)

# Plot the Elbow method results (Distortions and WCSS)
plt.plot(range(1, 11), distortions, 'bx-')
plt.xlabel('Values of K')
plt.ylabel('Distortion')
plt.title('The Elbow Method using Distortion')
plt.show()

plt.plot(range(1, 11), wcss, 'ro-')
plt.xlabel('Number of clusters (K)')
plt.ylabel('WCSS')
plt.title('The Elbow Method using WCSS')
plt.show()

# Apply KMeans with the chosen number of clusters (e.g., 7)
model = KMeans(n_clusters=7, init='k-means++')
clusters = model.fit_predict(scaled_values)

# Add cluster labels to the dataframe
df['cluster'] = clusters

# Print the first few rows with the cluster assignments
print(df.head())

# Display the inertia (WCSS) for the final model
print(f"Inertia (WCSS) for the final model: {model.inertia_}")

# Visualize the clusters using a scatter plot
plt.scatter(df['ORDERLINENUMBER'], df['SALES'], c=df['cluster'])
plt.xlabel('ORDERLINENUMBER')
plt.ylabel('SALES')
plt.title('Clusters of Order Numbers and Sales')
plt.show()
